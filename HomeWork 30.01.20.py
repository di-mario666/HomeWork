"""
Задание 1 Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""

def my_func(x, y, z):
    # x - выработка в часах
    # y - ставка в час
    # z - премия
    pay = float((x * y) + z)
    return pay
my_pay = my_func(178, 158.2, 14782)

print(f"Размер заработной платы :", my_pay, "рублей")

"""
Задание 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
"""

a = [i for i in range(1, 5)]  # генератор списка до 5.
for i in range(1, len(a)):
    if int(a[i]) > int(a[i - 1]):
        print(a[i])  # выводит все значения, кроме первого, так как они все больше него

"""
Задание 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""
list_a = [i for i in range(20, 240)]
list_b = [x for x in list_a if x % 20 == 0 or x % 21 == 0]

print(list_b)

"""
Задание 4. Представлен список чисел. 
Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
"""
list_a = [1, 7, 23, 7, 8, 9, 23, 1, 2, 5, 23]
list_b = [x for x in list_a if list_a.count(x) < 2]
print(list_b)

"""
Задание 5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""
from functools import reduce

# Реализация условия- список кратных чисел
list_a = [i for i in range(99, 1001)]
list_b = print([x for x in list_a if x % 2 == 0])

# Реализация условия- произведение всех элементов исходного списка
print(f"результат произведения всех элементов списка list_a :", reduce(lambda x, y: x * y, list_a))

"""
Задание 6. Реализовать два небольших скрипта:
а) бесконечный итератор, генерирующий целые числа, начиная с указанного,
б) бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
"""
from itertools import count

# беконечный цикл!
for el in count(int(input('Введите стартовое число '))):
    print(el)

from itertools import cycle

# беконечный цикл!
my_list = ['Привет', 666, True]
for el in cycle(my_list):
    print(el)

"""
Задание 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fibo_gen(). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые 15 чисел.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""
from itertools import count
from math import factorial

def fibo_gen():
    for el in count(1):
        yield factorial(el)

gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break